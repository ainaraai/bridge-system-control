<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\server.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\server.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun May 18 16:54:48 2025
<BR><P>
<H3>Maximum Stack Usage =        464 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
net_http_server_run &rArr; http_server_run &rArr; http_kill_session &rArr; netCGI_ProcessData &rArr; user_status &rArr; osMessageQueueGet &rArr; osRtxPostProcess
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[18c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1c1]">osRtxThreadListRoot</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c1]">osRtxThreadListRoot</a><BR>
 <LI><a href="#[2a4]">net_sys_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a4]">net_sys_error</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a3]">AccesoManual_Thread</a> from principal.o(i.AccesoManual_Thread) referenced from principal.o(i.Init_Thread_principal)
 <LI><a href="#[d]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[c6]">Control</a> from emac_stm32f4xx.o(i.Control) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[c5]">ControlTimer</a> from emac_stm32f4xx.o(i.ControlTimer) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[61]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6c]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">ETH_IRQHandler</a> from emac_stm32f4xx.o(i.ETH_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b9]">GetCapabilities</a> from emac_stm32f4xx.o(i.GetCapabilities) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[b7]">GetLinkInfo</a> from phy_lan8742a.o(i.GetLinkInfo) referenced from phy_lan8742a.o(.constdata)
 <LI><a href="#[b6]">GetLinkState</a> from phy_lan8742a.o(i.GetLinkState) referenced from phy_lan8742a.o(.constdata)
 <LI><a href="#[bd]">GetMacAddress</a> from emac_stm32f4xx.o(i.GetMacAddress) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[c2]">GetRxFrameSize</a> from emac_stm32f4xx.o(i.GetRxFrameSize) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[c3]">GetRxFrameTime</a> from emac_stm32f4xx.o(i.GetRxFrameTime) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[c4]">GetTxFrameTime</a> from emac_stm32f4xx.o(i.GetTxFrameTime) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[b0]">GetVersion</a> from phy_lan8742a.o(i.GetVersion) referenced 2 times from phy_lan8742a.o(.constdata)
 <LI><a href="#[ca]">HAL_RCC_GetPCLK1Freq</a> from stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq) referenced 2 times from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[c9]">HAL_RCC_GetPCLK2Freq</a> from stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq) referenced 2 times from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[62]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b1]">Initialize</a> from phy_lan8742a.o(i.Initialize) referenced 2 times from phy_lan8742a.o(.constdata)
 <LI><a href="#[6b]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6a]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[c7]">PHY_Read</a> from emac_stm32f4xx.o(i.PHY_Read) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[c8]">PHY_Write</a> from emac_stm32f4xx.o(i.PHY_Write) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b3]">PowerControl</a> from phy_lan8742a.o(i.PowerControl) referenced 2 times from phy_lan8742a.o(.constdata)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[c1]">ReadFrame</a> from emac_stm32f4xx.o(i.ReadFrame) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d4]">SPI1_Control</a> from spi_stm32f4xx.o(i.SPI1_Control) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[d3]">SPI1_GetDataCount</a> from spi_stm32f4xx.o(i.SPI1_GetDataCount) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[d5]">SPI1_GetStatus</a> from spi_stm32f4xx.o(i.SPI1_GetStatus) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from spi_stm32f4xx.o(i.SPI1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[cd]">SPI1_Initialize</a> from spi_stm32f4xx.o(i.SPI1_Initialize) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[cf]">SPI1_PowerControl</a> from spi_stm32f4xx.o(i.SPI1_PowerControl) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[d1]">SPI1_Receive</a> from spi_stm32f4xx.o(i.SPI1_Receive) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[d0]">SPI1_Send</a> from spi_stm32f4xx.o(i.SPI1_Send) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[d2]">SPI1_Transfer</a> from spi_stm32f4xx.o(i.SPI1_Transfer) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[ce]">SPI1_Uninitialize</a> from spi_stm32f4xx.o(i.SPI1_Uninitialize) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[dd]">SPI2_Control</a> from spi_stm32f4xx.o(i.SPI2_Control) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[dc]">SPI2_GetDataCount</a> from spi_stm32f4xx.o(i.SPI2_GetDataCount) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[de]">SPI2_GetStatus</a> from spi_stm32f4xx.o(i.SPI2_GetStatus) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from spi_stm32f4xx.o(i.SPI2_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d6]">SPI2_Initialize</a> from spi_stm32f4xx.o(i.SPI2_Initialize) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[d8]">SPI2_PowerControl</a> from spi_stm32f4xx.o(i.SPI2_PowerControl) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[da]">SPI2_Receive</a> from spi_stm32f4xx.o(i.SPI2_Receive) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[d9]">SPI2_Send</a> from spi_stm32f4xx.o(i.SPI2_Send) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[db]">SPI2_Transfer</a> from spi_stm32f4xx.o(i.SPI2_Transfer) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[d7]">SPI2_Uninitialize</a> from spi_stm32f4xx.o(i.SPI2_Uninitialize) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[e6]">SPI3_Control</a> from spi_stm32f4xx.o(i.SPI3_Control) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[e5]">SPI3_GetDataCount</a> from spi_stm32f4xx.o(i.SPI3_GetDataCount) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[e7]">SPI3_GetStatus</a> from spi_stm32f4xx.o(i.SPI3_GetStatus) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from spi_stm32f4xx.o(i.SPI3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[df]">SPI3_Initialize</a> from spi_stm32f4xx.o(i.SPI3_Initialize) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[e1]">SPI3_PowerControl</a> from spi_stm32f4xx.o(i.SPI3_PowerControl) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[e3]">SPI3_Receive</a> from spi_stm32f4xx.o(i.SPI3_Receive) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[e2]">SPI3_Send</a> from spi_stm32f4xx.o(i.SPI3_Send) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[e4]">SPI3_Transfer</a> from spi_stm32f4xx.o(i.SPI3_Transfer) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[e0]">SPI3_Uninitialize</a> from spi_stm32f4xx.o(i.SPI3_Uninitialize) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[ef]">SPI4_Control</a> from spi_stm32f4xx.o(i.SPI4_Control) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[ee]">SPI4_GetDataCount</a> from spi_stm32f4xx.o(i.SPI4_GetDataCount) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[f0]">SPI4_GetStatus</a> from spi_stm32f4xx.o(i.SPI4_GetStatus) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[66]">SPI4_IRQHandler</a> from spi_stm32f4xx.o(i.SPI4_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e8]">SPI4_Initialize</a> from spi_stm32f4xx.o(i.SPI4_Initialize) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[ea]">SPI4_PowerControl</a> from spi_stm32f4xx.o(i.SPI4_PowerControl) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[ec]">SPI4_Receive</a> from spi_stm32f4xx.o(i.SPI4_Receive) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[eb]">SPI4_Send</a> from spi_stm32f4xx.o(i.SPI4_Send) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[ed]">SPI4_Transfer</a> from spi_stm32f4xx.o(i.SPI4_Transfer) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[e9]">SPI4_Uninitialize</a> from spi_stm32f4xx.o(i.SPI4_Uninitialize) referenced from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[67]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[68]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[cc]">SPIX_GetCapabilities</a> from spi_stm32f4xx.o(i.SPIX_GetCapabilities) referenced 4 times from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[cb]">SPIX_GetVersion</a> from spi_stm32f4xx.o(i.SPIX_GetVersion) referenced 4 times from spi_stm32f4xx.o(.constdata)
 <LI><a href="#[a1]">SPI_Master_Thread</a> from principal.o(i.SPI_Master_Thread) referenced from principal.o(i.Init_Thread_principal)
 <LI><a href="#[a7]">SPI_callback</a> from rfid.o(i.SPI_callback) referenced from rfid.o(i.TM_MFRC522_InitSPI)
 <LI><a href="#[a8]">SPI_callback</a> from flash.o(i.SPI_callback) referenced from flash.o(i.W25Q16_Init_SPI)
 <LI><a href="#[f]">SVC_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[c0]">SendFrame</a> from emac_stm32f4xx.o(i.SendFrame) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[bf]">SetAddressFilter</a> from emac_stm32f4xx.o(i.SetAddressFilter) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[b4]">SetInterface</a> from phy_lan8742a.o(i.SetInterface) referenced from phy_lan8742a.o(.constdata)
 <LI><a href="#[be]">SetMacAddress</a> from emac_stm32f4xx.o(i.SetMacAddress) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[b5]">SetMode</a> from phy_lan8742a.o(i.SetMode) referenced from phy_lan8742a.o(.constdata)
 <LI><a href="#[12]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[12]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6d]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[15]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[9d]">Th_flash</a> from flash.o(i.Th_flash) referenced from flash.o(i.Init_ThFlash)
 <LI><a href="#[a4]">Th_main</a> from http_server.o(i.Th_main) referenced from principal.o(i.Init_Thread_principal)
 <LI><a href="#[9e]">Th_rfid</a> from rfid.o(i.Th_rfid) referenced from rfid.o(i.Init_ThMFRC522)
 <LI><a href="#[9f]">ThreadTeclado</a> from teclado.o(i.ThreadTeclado) referenced from teclado.o(i.Init_ThreadTeclado)
 <LI><a href="#[a0]">Thread_LCD</a> from lcd.o(i.Thread_LCD) referenced from lcd.o(i.Init_Thread_LCD)
 <LI><a href="#[a5]">Timer2_Callback_SNTP</a> from http_server.o(i.Timer2_Callback_SNTP) referenced from http_server.o(i.Init_Timers_SNTP)
 <LI><a href="#[47]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b2]">Uninitialize</a> from phy_lan8742a.o(i.Uninitialize) referenced 2 times from phy_lan8742a.o(.constdata)
 <LI><a href="#[e]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a2]">Web_Thread</a> from principal.o(i.Web_Thread) referenced from principal.o(i.Init_Thread_principal)
 <LI><a href="#[115]">__main</a> from __main.o(!!!main) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[76]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[6f]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[73]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[72]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[74]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[71]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[70]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[f4]">eth0_callback</a> from net_config.o(i.eth0_callback) referenced from net_config.o(.constdata)
 <LI><a href="#[ab]">http_listener</a> from net_http_server.o(i.http_listener) referenced from net_http_server.o(i.net_http_server_init)
 <LI><a href="#[75]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[a6]">mySPI_callback</a> from lcd.o(i.mySPI_callback) referenced from lcd.o(i.LCD_reset)
 <LI><a href="#[ae]">netCore_Thread</a> from net_sys.o(i.netCore_Thread) referenced from net_config.o(i.netos_thread_create)
 <LI><a href="#[ad]">netETH_Thread</a> from net_eth.o(i.netETH_Thread) referenced from net_config.o(i.netif_create)
 <LI><a href="#[f7]">net_arp_cache_init</a> from net_arp.o(i.net_arp_cache_init) referenced from net_config.o(.constdata)
 <LI><a href="#[101]">net_arp_cache_run</a> from net_arp.o(i.net_arp_cache_run) referenced from net_config.o(.constdata)
 <LI><a href="#[10a]">net_arp_cache_uninit</a> from net_arp.o(i.net_arp_cache_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[f2]">net_eth_config_mcast</a> from net_eth.o(i.net_eth_config_mcast) referenced from net_config.o(.constdata)
 <LI><a href="#[112]">net_eth_get_option</a> from net_eth.o(i.net_eth_get_option) referenced from net_config.o(.constdata)
 <LI><a href="#[f5]">net_eth_iface_init</a> from net_eth.o(i.net_eth_iface_init) referenced from net_config.o(.constdata)
 <LI><a href="#[ff]">net_eth_iface_run</a> from net_eth.o(i.net_eth_iface_run) referenced from net_config.o(.constdata)
 <LI><a href="#[108]">net_eth_iface_uninit</a> from net_eth.o(i.net_eth_iface_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[f3]">net_eth_output</a> from net_eth.o(i.net_eth_output) referenced from net_config.o(.constdata)
 <LI><a href="#[f1]">net_eth_send_frame</a> from net_eth.o(i.net_eth_send_frame) referenced from net_config.o(.constdata)
 <LI><a href="#[113]">net_eth_set_option</a> from net_eth.o(i.net_eth_set_option) referenced from net_config.o(.constdata)
 <LI><a href="#[fd]">net_http_server_init</a> from net_http_server.o(i.net_http_server_init) referenced from net_config.o(.constdata)
 <LI><a href="#[106]">net_http_server_run</a> from net_http_server.o(i.net_http_server_run) referenced from net_config.o(.constdata)
 <LI><a href="#[110]">net_http_server_uninit</a> from net_http_server.o(i.net_http_server_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[fa]">net_igmp_host_init</a> from net_igmp.o(i.net_igmp_host_init) referenced from net_config.o(.constdata)
 <LI><a href="#[104]">net_igmp_host_run</a> from net_igmp.o(i.net_igmp_host_run) referenced from net_config.o(.constdata)
 <LI><a href="#[10d]">net_igmp_host_uninit</a> from net_igmp.o(i.net_igmp_host_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[f8]">net_ip4_frag_init</a> from net_ip4_frag.o(i.net_ip4_frag_init) referenced from net_config.o(.constdata)
 <LI><a href="#[102]">net_ip4_frag_run</a> from net_ip4_frag.o(i.net_ip4_frag_run) referenced from net_config.o(.constdata)
 <LI><a href="#[10b]">net_ip4_frag_uninit</a> from net_ip4_frag.o(i.net_ip4_frag_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[f6]">net_loop_iface_init</a> from net_loopback.o(i.net_loop_iface_init) referenced from net_config.o(.constdata)
 <LI><a href="#[100]">net_loop_iface_run</a> from net_loopback.o(i.net_loop_iface_run) referenced from net_config.o(.constdata)
 <LI><a href="#[109]">net_loop_iface_uninit</a> from net_loopback.o(i.net_loop_iface_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[114]">net_loop_send_frame</a> from net_loopback.o(i.net_loop_send_frame) referenced from net_loopback.o(.constdata)
 <LI><a href="#[f9]">net_ping_client_init</a> from net_ping_core.o(i.net_ping_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[103]">net_ping_client_run</a> from net_ping_core.o(i.net_ping_client_run) referenced from net_config.o(.constdata)
 <LI><a href="#[10c]">net_ping_client_uninit</a> from net_ping_core.o(i.net_ping_client_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[fe]">net_sntp_client_init</a> from net_sntp_client_core.o(i.net_sntp_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[107]">net_sntp_client_run</a> from net_sntp_client_core.o(i.net_sntp_client_run) referenced from net_config.o(.constdata)
 <LI><a href="#[111]">net_sntp_client_uninit</a> from net_sntp_client_core.o(i.net_sntp_client_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[af]">net_sys_tick</a> from net_sys.o(i.net_sys_tick) referenced from net_config.o(i.netos_timer_create)
 <LI><a href="#[fc]">net_tcp_socket_init</a> from net_tcp.o(i.net_tcp_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[105]">net_tcp_socket_run</a> from net_tcp.o(i.net_tcp_socket_run) referenced from net_config.o(.constdata)
 <LI><a href="#[10f]">net_tcp_socket_uninit</a> from net_tcp.o(i.net_tcp_socket_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[fb]">net_udp_socket_init</a> from net_udp.o(i.net_udp_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[10e]">net_udp_socket_uninit</a> from net_udp.o(i.net_udp_socket_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[85]">osRtxIdleThread</a> from rtx_config.o(i.osRtxIdleThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[98]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[99]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[9a]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[9c]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[86]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[87]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced from rtx_timer.o(.text.osRtxTimerThread)
 <LI><a href="#[9b]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[ac]">sntp_listener</a> from net_sntp_client_core.o(i.sntp_listener) referenced from net_sntp_client_core.o(i.net_sntp_client_init)
 <LI><a href="#[77]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[78]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[79]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[7a]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(.text.svcRtxKernelGetTickFreq) referenced from rtx_kernel.o(.text.osKernelGetTickFreq)
 <LI><a href="#[7b]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[7c]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[7d]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[7e]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(.text.osMessageQueueNew)
 <LI><a href="#[7f]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[80]">svcRtxMessageQueueReset</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueReset) referenced from rtx_msgqueue.o(.text.osMessageQueueReset)
 <LI><a href="#[81]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[82]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[83]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[84]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[88]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(.text.osSemaphoreAcquire)
 <LI><a href="#[89]">svcRtxSemaphoreDelete</a> from rtx_semaphore.o(.text.svcRtxSemaphoreDelete) referenced from rtx_semaphore.o(.text.osSemaphoreDelete)
 <LI><a href="#[8a]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[8b]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[8c]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[8d]">svcRtxThreadFlagsClear</a> from rtx_thread.o(.text.svcRtxThreadFlagsClear) referenced from rtx_thread.o(.text.osThreadFlagsClear)
 <LI><a href="#[8e]">svcRtxThreadFlagsSet</a> from rtx_thread.o(.text.svcRtxThreadFlagsSet) referenced from rtx_thread.o(.text.osThreadFlagsSet)
 <LI><a href="#[8f]">svcRtxThreadFlagsWait</a> from rtx_thread.o(.text.svcRtxThreadFlagsWait) referenced from rtx_thread.o(.text.osThreadFlagsWait)
 <LI><a href="#[90]">svcRtxThreadGetId</a> from rtx_thread.o(.text.svcRtxThreadGetId) referenced from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[91]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[92]">svcRtxThreadTerminate</a> from rtx_thread.o(.text.svcRtxThreadTerminate) referenced from rtx_thread.o(.text.osThreadTerminate)
 <LI><a href="#[93]">svcRtxThreadYield</a> from rtx_thread.o(.text.svcRtxThreadYield) referenced from rtx_thread.o(.text.osThreadYield)
 <LI><a href="#[94]">svcRtxTimerIsRunning</a> from rtx_timer.o(.text.svcRtxTimerIsRunning) referenced from rtx_timer.o(.text.osTimerIsRunning)
 <LI><a href="#[95]">svcRtxTimerNew</a> from rtx_timer.o(.text.svcRtxTimerNew) referenced from rtx_timer.o(.text.osTimerNew)
 <LI><a href="#[96]">svcRtxTimerStart</a> from rtx_timer.o(.text.svcRtxTimerStart) referenced from rtx_timer.o(.text.osTimerStart)
 <LI><a href="#[97]">svcRtxTimerStop</a> from rtx_timer.o(.text.svcRtxTimerStop) referenced from rtx_timer.o(.text.osTimerStop)
 <LI><a href="#[a9]">time_callback</a> from sntp.o(i.time_callback) referenced from sntp.o(i.get_time)
 <LI><a href="#[aa]">timer_medidas_callback</a> from rfid.o(i.timer_medidas_callback) referenced from rfid.o(i.init_timer_medidas)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[115]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[386]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[387]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[388]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[389]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[38a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[11d]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[163]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[11f]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[121]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[123]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[124]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[125]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[127]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[129]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[12a]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[12b]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[12d]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[38b]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[12f]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[131]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[133]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[38c]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[149]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[135]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[137]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[38d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[38e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[139]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[38f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[390]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[391]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[392]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[393]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[394]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[395]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[396]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[397]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[398]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[399]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[39a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[39b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[39c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[39d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[39e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[39f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[3a0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[3a1]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[3a2]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[140]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[3a3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[142]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_heap_2 &rArr; _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[3a4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3a5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[3a6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[3a7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[3a8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[11b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[3a9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[144]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[146]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[148]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[14a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3aa]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[19c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[3ab]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[14f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3ac]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc2.o(.emb_text), UNUSED)

<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[3ad]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_callback
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[156]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Script
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTeclado
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Thread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_http
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
</UL>

<P><STRONG><a name="[159]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[15a]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[15b]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[15c]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[158]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[128]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[11e]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[15e]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[12c]"></a>_printf_int_oct</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, _printf_oct_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[3ae]"></a>_printf_longlong_oct</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_oct_int.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>_printf_longlong_hex</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[12e]"></a>_printf_int_hex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[120]"></a>_printf_hex_ptr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[161]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[164]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_aton
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
</UL>

<P><STRONG><a name="[166]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[168]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[1f1]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLowestPosUser
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_user
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_status
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAllUsers
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_prefix_add
</UL>

<P><STRONG><a name="[37a]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
</UL>

<P><STRONG><a name="[30f]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userToBytes
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytesToUser
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_status
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Script
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_enqueue
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueReset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>

<P><STRONG><a name="[16b]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3af]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_callback
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_Thread
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[3b0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLowestPosUser
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAllUsers
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteUser
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_host_uninit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_uninit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sntp_send_message
</UL>

<P><STRONG><a name="[16f]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[16e]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_uninit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_uninit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sntp_client_uninit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_uninit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_uninit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_http_server_uninit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_http_server_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_uninit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_uninit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>

<P><STRONG><a name="[3b3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[171]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_user1
</UL>

<P><STRONG><a name="[286]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[173]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_callback
</UL>

<P><STRONG><a name="[3b5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3b6]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3b8]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[180]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[157]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[70]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[181]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[130]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[132]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[182]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[134]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[183]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[167]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[165]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[71]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[16a]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[15f]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[174]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[3b9]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[17c]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[17f]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[184]"></a>__vfscanf</STRONG> (Thumb, 880 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[185]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[178]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13f]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[141]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[145]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[18d]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[18b]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[18f]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2c2]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[3bb]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[3bc]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[187]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[19b]"></a>_fopen$locked</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[14c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[188]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[18e]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[3bd]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[3be]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[1a1]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[138]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[1a4]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[194]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[155]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[19a]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[3bf]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[195]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[196]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[190]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[19e]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[19d]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[150]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1a3]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1a6]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[3c0]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[1a2]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1aa]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[3c1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, term_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_heap_2
</UL>

<P><STRONG><a name="[1ab]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1ac]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, h1_final_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_Finalize &rArr; _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[1cf]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1d8]"></a>OS_Tick_Enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1d7]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1d6]"></a>OS_Tick_Setup</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1ed]"></a>osDelay</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_disable
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage_Clean
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init_SPI
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_64kBlock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_main
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTeclado
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Thread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_LCD
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_PowerUp
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_PoerDown
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>

<P><STRONG><a name="[1fd]"></a>osKernelGetState</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[1fe]"></a>osKernelGetTickCount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[377]"></a>osKernelGetTickFreq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_init
</UL>

<P><STRONG><a name="[1ad]"></a>osKernelInitialize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fa]"></a>osKernelStart</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>osMessageQueueGet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_status
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_Thread
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Thread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_LCD
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[1d0]"></a>osMessageQueueNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_principal
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThreadTeclado
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThMFRC522
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MsgQueue_LCD
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThFlash
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[1b3]"></a>osMessageQueuePut</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUser
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTeclado
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_rfid
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_Thread
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Thread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAllUsers
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_user1
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[1f3]"></a>osMessageQueueReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osMessageQueueReset))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
</UL>

<P><STRONG><a name="[282]"></a>osMutexAcquire</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>

<P><STRONG><a name="[283]"></a>osMutexDelete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexDelete))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[284]"></a>osMutexNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
</UL>

<P><STRONG><a name="[285]"></a>osMutexRelease</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>

<P><STRONG><a name="[1ae]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[1d9]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[1c7]"></a>osRtxMemoryFree</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[98]"></a>osRtxMemoryInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[1b4]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueReset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[1b6]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueReset
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[1d5]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[1bb]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1bc]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[151]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1b2]"></a>osRtxPostProcess</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[1c0]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1be]"></a>osRtxThreadDispatch</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueReset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[1b7]"></a>osRtxThreadListGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueReset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[1c8]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1c2]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1bd]"></a>osRtxThreadListSort</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1c3]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1b9]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueReset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1ca]"></a>osRtxThreadStartup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1c5]"></a>osRtxThreadSwitch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1cc]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1b8]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueReset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[152]"></a>osRtxTick_Handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[86]"></a>osRtxTimerThread</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[374]"></a>osSemaphoreAcquire</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>

<P><STRONG><a name="[372]"></a>osSemaphoreDelete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreDelete))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_delete
</UL>

<P><STRONG><a name="[371]"></a>osSemaphoreNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
</UL>

<P><STRONG><a name="[1d2]"></a>osSemaphoreRelease</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>

<P><STRONG><a name="[9b]"></a>osThreadExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[376]"></a>osThreadFlagsClear</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadFlagsClear))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
</UL>

<P><STRONG><a name="[1d4]"></a>osThreadFlagsSet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_callback
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_status
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_medidas_callback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_callback
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_Thread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySPI_callback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_user1
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>

<P><STRONG><a name="[1eb]"></a>osThreadFlagsWait</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadFlagsWait))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage_Clean
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteInstruction
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Read
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_FastRead
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_64kBlock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTeclado
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_rfid
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_WriteRegister
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ReadRegister
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_Thread
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Thread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_wr_data
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_wr_cmd
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
</UL>

<P><STRONG><a name="[281]"></a>osThreadGetId</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[221]"></a>osThreadNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_principal
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThreadTeclado
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThMFRC522
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_LCD
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThFlash
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
</UL>

<P><STRONG><a name="[373]"></a>osThreadTerminate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadTerminate))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_delete
</UL>

<P><STRONG><a name="[378]"></a>osThreadYield</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadYield))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
</UL>

<P><STRONG><a name="[24c]"></a>osTimerIsRunning</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerIsRunning))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Thread
</UL>

<P><STRONG><a name="[228]"></a>osTimerNew</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_timer.o(.text.osTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timers_SNTP
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_medidas
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
</UL>

<P><STRONG><a name="[229]"></a>osTimerStart</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timers_SNTP
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det_rfid_on
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Thread
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
</UL>

<P><STRONG><a name="[24d]"></a>osTimerStop</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerStop))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Thread
</UL>

<P><STRONG><a name="[179]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1dc]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1db]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1dd]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1de]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[17a]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17b]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1df]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1e0]"></a>ADC_ConversionDone</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc.o(i.ADC_ConversionDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_ConversionDone &rArr; HAL_ADC_PollForConversion &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_getValue
</UL>

<P><STRONG><a name="[1e2]"></a>ADC_GetValue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, adc.o(i.ADC_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_GetValue &rArr; HAL_ADC_PollForConversion &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_getValue
</UL>

<P><STRONG><a name="[1e4]"></a>ADC_Initialize</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, adc.o(i.ADC_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ModADC
</UL>

<P><STRONG><a name="[1e7]"></a>ADC_StartConversion</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc.o(i.ADC_StartConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_StartConversion &rArr; HAL_ADC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_getValue
</UL>

<P><STRONG><a name="[1e9]"></a>ADC_getValue</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, adc.o(i.ADC_getValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_getValue &rArr; ADC_GetValue &rArr; HAL_ADC_PollForConversion &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversion
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionDone
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Script
</UL>

<P><STRONG><a name="[a3]"></a>AccesoManual_Thread</STRONG> (Thumb, 626 bytes, Stack size 8 bytes, principal.o(i.AccesoManual_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = AccesoManual_Thread &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueReset
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModTecladoThreadID
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModTecladoQueueID
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passwords_match
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModLCDQueueID
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMsgTXFlashID
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMsgRXFlashID
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModFlashThreadID
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> principal.o(i.Init_Thread_principal)
</UL>
<P><STRONG><a name="[314]"></a>Boat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, principal.o(i.Boat))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Script
</UL>

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, emac_stm32f4xx.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[215]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_getValue
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionDone
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_ADC_Start</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversion
</UL>

<P><STRONG><a name="[246]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[248]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 336 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uninitialize
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_GPIO_Init</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init_SPI
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teclado_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_InitSPI
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_reset
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTeclado
</UL>

<P><STRONG><a name="[232]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage_Clean
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteInstruction
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Read
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init_SPI
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_FastRead
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_64kBlock
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teclado_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTeclado
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_WriteRegister
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ReadRegister
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_InitSPI
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_wr_data
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_wr_cmd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_reset
</UL>

<P><STRONG><a name="[253]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_GetTick</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[201]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[202]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[24e]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[23b]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teclado_init
</UL>

<P><STRONG><a name="[204]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[200]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[214]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[207]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 746 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[208]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[20a]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[ca]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[209]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[20c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1152 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[26c]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_main
</UL>

<P><STRONG><a name="[238]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarConfig
</UL>

<P><STRONG><a name="[20d]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Script
</UL>

<P><STRONG><a name="[20f]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Script
</UL>

<P><STRONG><a name="[210]"></a>HAL_RTC_Init</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[211]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 96 bytes, Stack size 112 bytes, stm32f4xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[216]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_callback
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarConfig
</UL>

<P><STRONG><a name="[218]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_callback
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarConfig
</UL>

<P><STRONG><a name="[213]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[203]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[219]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[21b]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[21a]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[21c]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[29f]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[2a0]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37b]"></a>ITM_SendChar</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, retarget_io.o(i.ITM_SendChar))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stderr_putchar
</UL>

<P><STRONG><a name="[21e]"></a>Init_ModADC</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adc.o(i.Init_ModADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Init_ModADC &rArr; ADC_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_main
</UL>

<P><STRONG><a name="[21f]"></a>Init_MsgQueue_LCD</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.Init_MsgQueue_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_MsgQueue_LCD
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initModLCD
</UL>

<P><STRONG><a name="[220]"></a>Init_ThFlash</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, flash.o(i.Init_ThFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_ThFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_principal
</UL>

<P><STRONG><a name="[222]"></a>Init_ThMFRC522</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rfid.o(i.Init_ThMFRC522))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_ThMFRC522
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_principal
</UL>

<P><STRONG><a name="[223]"></a>Init_ThreadTeclado</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, teclado.o(i.Init_ThreadTeclado))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_ThreadTeclado
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_principal
</UL>

<P><STRONG><a name="[224]"></a>Init_Thread_LCD</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.Init_Thread_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Thread_LCD
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initModLCD
</UL>

<P><STRONG><a name="[225]"></a>Init_Thread_principal</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, principal.o(i.Init_Thread_principal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init_Thread_principal &rArr; initModLCD &rArr; Init_Thread_LCD
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThreadTeclado
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThMFRC522
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initModLCD
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[227]"></a>Init_Timers_SNTP</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, http_server.o(i.Init_Timers_SNTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_Timers_SNTP &rArr; osTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_main
</UL>

<P><STRONG><a name="[22b]"></a>LCD_LineaToLocalBuffer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd.o(i.LCD_LineaToLocalBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_LineaToLocalBuffer &rArr; LCD_symbolToLocalBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_symbolToLocalBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_LCD
</UL>

<P><STRONG><a name="[22d]"></a>LCD_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lcd.o(i.LCD_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_init &rArr; LCD_update &rArr; LCD_wr_data
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearBuffer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_wr_cmd
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_update
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_LCD
</UL>

<P><STRONG><a name="[231]"></a>LCD_reset</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, lcd.o(i.LCD_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_reset &rArr; delay &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_LCD
</UL>

<P><STRONG><a name="[22c]"></a>LCD_symbolToLocalBuffer</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, lcd.o(i.LCD_symbolToLocalBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_symbolToLocalBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LineaToLocalBuffer
</UL>

<P><STRONG><a name="[230]"></a>LCD_update</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, lcd.o(i.LCD_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_update &rArr; LCD_wr_data
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearBuffer
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_wr_data
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[235]"></a>LCD_update_L1</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lcd.o(i.LCD_update_L1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_update_L1 &rArr; LCD_wr_data
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearBuffer
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_wr_data
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_LCD
</UL>

<P><STRONG><a name="[236]"></a>LCD_update_L2</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lcd.o(i.LCD_update_L2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_update_L2 &rArr; LCD_wr_data
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearBuffer
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_wr_data
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_LCD
</UL>

<P><STRONG><a name="[22e]"></a>LCD_wr_cmd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lcd.o(i.LCD_wr_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_wr_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_update_L2
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_update_L1
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_update
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[234]"></a>LCD_wr_data</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcd.o(i.LCD_wr_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_wr_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_update_L2
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_update_L1
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_update
</UL>

<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20e]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[217]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[237]"></a>RTC_CalendarConfig</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rtc.o(i.RTC_CalendarConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_CalendarConfig &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_main
</UL>

<P><STRONG><a name="[212]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_EnterInitMode &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[239]"></a>RTC_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtc.o(i.RTC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTC_init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_main
</UL>

<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI1_IRQHandler &rArr; SPI_IRQHandler &rArr; SPI_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI2_IRQHandler &rArr; SPI_IRQHandler &rArr; SPI_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI3_IRQHandler &rArr; SPI_IRQHandler &rArr; SPI_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SPI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI4_IRQHandler &rArr; SPI_IRQHandler &rArr; SPI_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>SPI_Master_Thread</STRONG> (Thumb, 438 bytes, Stack size 0 bytes, principal.o(i.SPI_Master_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SPI_Master_Thread &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerIsRunning
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModTecladoQueueID
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModLCDQueueID
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> principal.o(i.Init_Thread_principal)
</UL>
<P><STRONG><a name="[2f9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>SystemInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[21d]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[a4]"></a>Th_main</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, http_server.o(i.Th_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = Th_main &rArr; get_time &rArr; netSNTPc_GetTime &rArr; net_sntp_client_start &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarConfig
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ModADC
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timers_SNTP
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> principal.o(i.Init_Thread_principal)
</UL>
<P><STRONG><a name="[9f]"></a>ThreadTeclado</STRONG> (Thumb, 762 bytes, Stack size 16 bytes, teclado.o(i.ThreadTeclado))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ThreadTeclado &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teclado_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_index_from_pin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModTecladoQueueID
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModLCDQueueID
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teclado.o(i.Init_ThreadTeclado)
</UL>
<P><STRONG><a name="[a0]"></a>Thread_LCD</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lcd.o(i.Thread_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Thread_LCD &rArr; LCD_reset &rArr; delay &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_update_L2
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_update_L1
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_reset
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LineaToLocalBuffer
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.Init_Thread_LCD)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[269]"></a>W25Q16_PoerDown</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flash.o(i.W25Q16_PoerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25Q16_PoerDown &rArr; W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteInstruction
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
</UL>

<P><STRONG><a name="[26b]"></a>W25Q16_PowerUp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flash.o(i.W25Q16_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25Q16_PowerUp &rArr; W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteInstruction
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
</UL>

<P><STRONG><a name="[a2]"></a>Web_Thread</STRONG> (Thumb, 352 bytes, Stack size 160 bytes, principal.o(i.Web_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Web_Thread &rArr; add_user1 &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMsgTXFlashID
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMsgRXFlashID
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModFlashThreadID
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_user1
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> principal.o(i.Init_Thread_principal)
</UL>
<P><STRONG><a name="[17e]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[176]"></a>__user_perthread_libspace</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_lib.o(i.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[162]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[116]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[117]"></a>_mutex_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[118]"></a>_mutex_initialize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_lib.o(i._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[119]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[147]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_lib.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[197]"></a>_sys_close</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, retarget_io.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[192]"></a>_sys_flen</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[193]"></a>_sys_istty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[199]"></a>_sys_open</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, retarget_io.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[1a7]"></a>_sys_seek</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, retarget_io.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1a8]"></a>_sys_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, retarget_io.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stderr_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[265]"></a>addUser</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, flash.o(i.addUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = addUser &rArr; W25Q16_WritePage_Clean &rArr; W25Q16_Erase_Sector &rArr; write_enable &rArr; W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userToBytes
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumUsers
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLowestPosUser
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_user
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage_Clean
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
</UL>

<P><STRONG><a name="[27e]"></a>add_user1</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, flash.o(i.add_user1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = add_user1 &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_Thread
</UL>

<P><STRONG><a name="[22f]"></a>clearBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd.o(i.clearBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_update_L2
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_update_L1
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_update
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[233]"></a>delay</STRONG> (Thumb, 108 bytes, Stack size 80 bytes, lcd.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = delay &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_reset
</UL>

<P><STRONG><a name="[266]"></a>deleteUser</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, flash.o(i.deleteUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = deleteUser &rArr; W25Q16_WritePage_Clean &rArr; W25Q16_Erase_Sector &rArr; write_enable &rArr; W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumUsers
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_user
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage_Clean
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
</UL>

<P><STRONG><a name="[27f]"></a>delete_user</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, flash.o(i.delete_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = delete_user &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_Thread
</UL>

<P><STRONG><a name="[270]"></a>det_rfid_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rfid.o(i.det_rfid_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = det_rfid_on
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_rfid
</UL>

<P><STRONG><a name="[76]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[267]"></a>getAllUsers</STRONG> (Thumb, 106 bytes, Stack size 224 bytes, flash.o(i.getAllUsers))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = getAllUsers &rArr; getNumUsers &rArr; W25Q16_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumUsers
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytesToUser
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_FastRead
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
</UL>

<P><STRONG><a name="[312]"></a>getMessageWebID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, principal.o(i.getMessageWebID))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
</UL>

<P><STRONG><a name="[1ee]"></a>getModFlashThreadID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(i.getModFlashThreadID))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_status
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_Thread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
</UL>

<P><STRONG><a name="[1ec]"></a>getModLCDQueueID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(i.getModLCDQueueID))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTeclado
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Thread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
</UL>

<P><STRONG><a name="[1f2]"></a>getModTecladoQueueID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, teclado.o(i.getModTecladoQueueID))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTeclado
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Thread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
</UL>

<P><STRONG><a name="[1f5]"></a>getModTecladoThreadID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, teclado.o(i.getModTecladoThreadID))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
</UL>

<P><STRONG><a name="[1ef]"></a>getMsgRXFlashID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(i.getMsgRXFlashID))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_Thread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
</UL>

<P><STRONG><a name="[37d]"></a>getMsgTXBIGFlashID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(i.getMsgTXBIGFlashID))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_status
</UL>

<P><STRONG><a name="[1f0]"></a>getMsgTXFlashID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(i.getMsgTXFlashID))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_Thread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
</UL>

<P><STRONG><a name="[26a]"></a>getThIDPrinAccesoManual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, principal.o(i.getThIDPrinAccesoManual))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
</UL>

<P><STRONG><a name="[264]"></a>getThIDPrinWeb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, principal.o(i.getThIDPrinWeb))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
</UL>

<P><STRONG><a name="[311]"></a>getThIDPrinc1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, principal.o(i.getThIDPrinc1))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
</UL>

<P><STRONG><a name="[272]"></a>get_col_index_from_pin</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, teclado.o(i.get_col_index_from_pin))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTeclado
</UL>

<P><STRONG><a name="[26e]"></a>get_time</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sntp.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = get_time &rArr; netSNTPc_GetTime &rArr; net_sntp_client_start &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSNTPc_GetTime
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Callback_SNTP
</UL>

<P><STRONG><a name="[310]"></a>hexCharToByte</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, http_server_cgi.o(i.hexCharToByte))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
</UL>

<P><STRONG><a name="[2de]"></a>imageFileInfo</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, web.o(i.imageFileInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = imageFileInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[226]"></a>initModLCD</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(i.initModLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initModLCD &rArr; Init_Thread_LCD
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_LCD
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MsgQueue_LCD
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_principal
</UL>

<P><STRONG><a name="[14b]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_principal
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a6]"></a>mySPI_callback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd.o(i.mySPI_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mySPI_callback &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_reset)
</UL>
<P><STRONG><a name="[2c9]"></a>netCGI_Charset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.netCGI_Charset))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[2ce]"></a>netCGI_ContentType</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.netCGI_ContentType))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_ftype
</UL>

<P><STRONG><a name="[2cb]"></a>netCGI_CustomHeader</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.netCGI_CustomHeader))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[30d]"></a>netCGI_GetEnvVar</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, net_http_server.o(i.netCGI_GetEnvVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netCGI_GetEnvVar
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessQuery
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
</UL>

<P><STRONG><a name="[2d1]"></a>netCGI_ProcessData</STRONG> (Thumb, 402 bytes, Stack size 152 bytes, http_server_cgi.o(i.netCGI_ProcessData))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = netCGI_ProcessData &rArr; user_status &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_status
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_GetEnvVar
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getThIDPrinc1
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMessageWebID
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexCharToByte
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_http_server_uninit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
</UL>

<P><STRONG><a name="[2d6]"></a>netCGI_ProcessQuery</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, http_server_cgi.o(i.netCGI_ProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = netCGI_ProcessQuery &rArr; netCGI_GetEnvVar
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_GetEnvVar
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2df]"></a>netCGI_Redirect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, http_server_cgi.o(i.netCGI_Redirect))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[2ec]"></a>netCGI_Script</STRONG> (Thumb, 556 bytes, Stack size 80 bytes, http_server_cgi.o(i.netCGI_Script))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = netCGI_Script &rArr; user_status &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_status
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boat
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_getValue
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2c7]"></a>netCGX_ContentType</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.netCGX_ContentType))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[ae]"></a>netCore_Thread</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, net_sys.o(i.netCore_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netCore_Thread &rArr; netos_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_proc_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(i.netos_thread_create)
</UL>
<P><STRONG><a name="[2a5]"></a>netETH_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(i.netETH_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_uninit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[2ad]"></a>netETH_ReceiveRaw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(i.netETH_ReceiveRaw))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[ad]"></a>netETH_Thread</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, net_eth.o(i.netETH_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netETH_Thread &rArr; eth_receive &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_check_link
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(i.netif_create)
</UL>
<P><STRONG><a name="[2d2]"></a>netHTTPs_AcceptClient</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.netHTTPs_AcceptClient))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2da]"></a>netHTTPs_FileAccess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.netHTTPs_FileAccess))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[2d0]"></a>netHTTPs_fclose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(i.netHTTPs_fclose))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_http_server_uninit
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
</UL>

<P><STRONG><a name="[379]"></a>netHTTPs_fgets</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.netHTTPs_fgets))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
</UL>

<P><STRONG><a name="[2dc]"></a>netHTTPs_fopen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.netHTTPs_fopen))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[2ea]"></a>netHTTPs_fread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.netHTTPs_fread))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2dd]"></a>netHTTPs_fstat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(i.netHTTPs_fstat))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[26d]"></a>netInitialize</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, net_sys.o(i.netInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netInitialize &rArr; net_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_main
</UL>

<P><STRONG><a name="[2a3]"></a>netMAC_aton</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, net_addr.o(i.netMAC_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netMAC_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[2c5]"></a>netSNTPc_GetTime</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, net_sntp_client_core.o(i.netSNTPc_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = netSNTPc_GetTime &rArr; net_sntp_client_start &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sntp_client_start
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[2a7]"></a>net_addr4_aton</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, net_addr.o(i.net_addr4_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sntp_client_start
</UL>

<P><STRONG><a name="[33c]"></a>net_addr4_to_mac</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_addr.o(i.net_addr4_to_mac))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_collect_mcast
</UL>

<P><STRONG><a name="[2a8]"></a>net_addr6_aton</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, net_addr.o(i.net_addr6_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = net_addr6_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[300]"></a>net_addr6_comp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_comp))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_refresh
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_find_route
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_comp
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
</UL>

<P><STRONG><a name="[302]"></a>net_addr6_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_copy))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_get_option
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_router_remove
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_copy
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
</UL>

<P><STRONG><a name="[304]"></a>net_addr6_create</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, net_addr.o(i.net_addr6_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_addr6_create
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_prefix_add
</UL>

<P><STRONG><a name="[345]"></a>net_addr6_get_solicited</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_get_solicited))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_collect_mcast
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>

<P><STRONG><a name="[358]"></a>net_addr6_is_linklocal</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_is_linklocal))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[357]"></a>net_addr6_is_onlink</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, net_addr.o(i.net_addr6_is_onlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_addr6_is_onlink
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
</UL>

<P><STRONG><a name="[351]"></a>net_addr6_is_solicited</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_is_solicited))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
</UL>

<P><STRONG><a name="[32e]"></a>net_addr6_is_unspec</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_is_unspec))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_collect_mcast
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
</UL>

<P><STRONG><a name="[33e]"></a>net_addr6_to_mac</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_to_mac))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_collect_mcast
</UL>

<P><STRONG><a name="[326]"></a>net_addr_comp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_comp))
<BR><BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sntp_listener
</UL>

<P><STRONG><a name="[327]"></a>net_addr_copy</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_copy))
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sntp_client_start
</UL>

<P><STRONG><a name="[328]"></a>net_addr_find_route</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_find_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_addr_find_route &rArr; net_ip4_find_route
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_find_route
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_find_route
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[32b]"></a>net_addr_get_local</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_get_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_addr_get_local &rArr; net_ip6_get_local
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[32d]"></a>net_addr_is_unspec</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_is_unspec))
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sntp_client_start
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[2b1]"></a>net_arp_cache_add</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_arp_cache_add &rArr; arp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[2b0]"></a>net_arp_cache_early</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_arp_cache_early &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[332]"></a>net_arp_cache_find</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_arp_cache_find &rArr; arp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[f7]"></a>net_arp_cache_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net_arp.o(i.net_arp_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = net_arp_cache_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>net_arp_cache_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_arp.o(i.net_arp_cache_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_arp_cache_run &rArr; arp_cache_run &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>net_arp_cache_uninit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_arp.o(i.net_arp_cache_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_arp_cache_uninit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[333]"></a>net_arp_enqueue</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_arp_enqueue &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[2ac]"></a>net_arp_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_arp.o(i.net_arp_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_arp_notify &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[2ae]"></a>net_arp_process</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_arp_process &rArr; net_arp_cache_add &rArr; arp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_sender_valid
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[2f8]"></a>net_chksum_buf</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, net_common.o(i.net_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
</UL>

<P><STRONG><a name="[2a9]"></a>net_crc_buf</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, net_common.o(i.net_crc_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_crc_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[2a1]"></a>net_eth_callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_eth.o(i.net_eth_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_eth_callback &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth0_callback
</UL>

<P><STRONG><a name="[f2]"></a>net_eth_config_mcast</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, net_eth.o(i.net_eth_config_mcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_eth_config_mcast &rArr; net_igmp_collect_mcast
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_collect_mcast
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_collect_mcast
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>net_eth_get_option</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_get_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_eth_get_option
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_opt_len
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>net_eth_iface_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_eth.o(i.net_eth_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = net_eth_iface_init &rArr; eth_iface_init &rArr; net_addr6_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>net_eth_iface_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_eth.o(i.net_eth_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = net_eth_iface_run &rArr; eth_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>net_eth_iface_uninit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_eth.o(i.net_eth_iface_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_eth_iface_uninit &rArr; eth_iface_uninit &rArr; netif_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>net_eth_output</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>net_eth_send_frame</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = net_eth_send_frame &rArr; net_ndp_enqueue &rArr; ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_enqueue
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_subcast
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_to_mac
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_to_mac
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>net_eth_set_option</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_set_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_eth_set_option &rArr; net_eth_config_mcast &rArr; net_igmp_collect_mcast
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_opt_len
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_mtu_limit
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>net_http_server_init</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, net_http_server.o(i.net_http_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = net_http_server_init &rArr; http_server_start &rArr; net_tcp_set_option
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_start
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>net_http_server_run</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_http_server.o(i.net_http_server_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = net_http_server_run &rArr; http_server_run &rArr; http_kill_session &rArr; netCGI_ProcessData &rArr; user_status &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>net_http_server_uninit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, net_http_server.o(i.net_http_server_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = net_http_server_uninit &rArr; netCGI_ProcessData &rArr; user_status &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netHTTPs_fclose
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[2b7]"></a>net_icmp6_process</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, net_icmp6.o(i.net_icmp6_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = net_icmp6_process &rArr; net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[30a]"></a>net_icmp6_send</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, net_icmp6.o(i.net_icmp6_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = net_icmp6_send &rArr; net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_get_solicited
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offl_hl
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
</UL>

<P><STRONG><a name="[347]"></a>net_icmp6_send_echo</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, net_icmp6.o(i.net_icmp6_send_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = net_icmp6_send_echo &rArr; net_icmp6_send &rArr; net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>

<P><STRONG><a name="[2b3]"></a>net_icmp_process</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, net_icmp.o(i.net_icmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_icmp_process &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[348]"></a>net_icmp_send_echo</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, net_icmp.o(i.net_icmp_send_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>

<P><STRONG><a name="[338]"></a>net_igmp_collect_mcast</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, net_igmp.o(i.net_igmp_collect_mcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_igmp_collect_mcast
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_to_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[fa]"></a>net_igmp_host_init</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, net_igmp.o(i.net_igmp_host_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_igmp_host_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>net_igmp_host_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_igmp.o(i.net_igmp_host_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = net_igmp_host_run &rArr; igmp_host_run &rArr; igmp_send_report &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_host_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>net_igmp_host_uninit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_igmp.o(i.net_igmp_host_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_igmp_host_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[34a]"></a>net_igmp_is_member</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net_igmp.o(i.net_igmp_is_member))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = net_igmp_is_member &rArr; igmp_map_group
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[2b4]"></a>net_igmp_process</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, net_igmp.o(i.net_igmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = net_igmp_process &rArr; net_ip4_chksum_buf &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[2af]"></a>net_ip4_chk_frame</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, net_ip4.o(i.net_ip4_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = net_ip4_chk_frame &rArr; net_igmp_is_member &rArr; igmp_map_group
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_is_member
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_subcast
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_mtu
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[34e]"></a>net_ip4_chksum</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = net_ip4_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[2f2]"></a>net_ip4_chksum_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_ip4_chksum_buf &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
</UL>

<P><STRONG><a name="[329]"></a>net_ip4_find_route</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_find_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip4_find_route
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_find_route
</UL>

<P><STRONG><a name="[34f]"></a>net_ip4_frag_add</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, net_ip4_frag.o(i.net_ip4_frag_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_ip4_frag_add &rArr; frag_map_session &rArr; que_free_list &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_map_session
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_reass_frame
</UL>

<P><STRONG><a name="[350]"></a>net_ip4_frag_get</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, net_ip4_frag.o(i.net_ip4_frag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[f8]"></a>net_ip4_frag_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_ip4_frag.o(i.net_ip4_frag_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_ip4_frag_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>net_ip4_frag_run</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net_ip4_frag.o(i.net_ip4_frag_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_ip4_frag_run &rArr; que_free_list &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>net_ip4_frag_uninit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_ip4_frag.o(i.net_ip4_frag_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_ip4_frag_uninit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[32c]"></a>net_ip4_get_local</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_get_local))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
</UL>

<P><STRONG><a name="[352]"></a>net_ip4_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_init))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[330]"></a>net_ip4_is_onlink</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_is_onlink))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_find_route
</UL>

<P><STRONG><a name="[33d]"></a>net_ip4_is_subcast</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_is_subcast))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[2b2]"></a>net_ip4_reass_frame</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_reass_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_ip4_reass_frame &rArr; net_ip4_frag_add &rArr; frag_map_session &rArr; que_free_list &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[2f3]"></a>net_ip4_send_frame</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, net_ip4.o(i.net_ip4_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_mtu
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[349]"></a>net_ip4_tx_offl_hl</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_tx_offl_hl))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[354]"></a>net_ip4_uninit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_uninit))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_uninit
</UL>

<P><STRONG><a name="[2b5]"></a>net_ip6_chk_frame</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, net_ip6.o(i.net_ip6_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ip6_chk_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_solicited
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[342]"></a>net_ip6_chksum</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net_ip6.o(i.net_ip6_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[339]"></a>net_ip6_collect_mcast</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, net_ip6.o(i.net_ip6_collect_mcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip6_collect_mcast
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_to_mac
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_get_solicited
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[32a]"></a>net_ip6_find_route</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, net_ip6.o(i.net_ip6_find_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_ip6_find_route
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_find_route
</UL>

<P><STRONG><a name="[30c]"></a>net_ip6_get_local</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, net_ip6.o(i.net_ip6_get_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip6_get_local
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
</UL>

<P><STRONG><a name="[353]"></a>net_ip6_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ip6.o(i.net_ip6_init))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[343]"></a>net_ip6_send_frame</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, net_ip6.o(i.net_ip6_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ip6_send_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[346]"></a>net_ip6_tx_offl_hl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_ip6.o(i.net_ip6_tx_offl_hl))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[355]"></a>net_ip6_uninit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_ip6.o(i.net_ip6_uninit))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_uninit
</UL>

<P><STRONG><a name="[f6]"></a>net_loop_iface_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_loopback.o(i.net_loop_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_loop_iface_init
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>net_loop_iface_run</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, net_loopback.o(i.net_loop_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = net_loop_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>net_loop_iface_uninit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_loopback.o(i.net_loop_iface_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_loop_iface_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_uninit
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>net_loop_send_frame</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, net_loopback.o(i.net_loop_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_loop_send_frame &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_loopback.o(.constdata)
</UL>
<P><STRONG><a name="[296]"></a>net_mem_alloc</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_enqueue
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_buf
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>

<P><STRONG><a name="[2e6]"></a>net_mem_avail</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_mem.o(i.net_mem_avail))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_enqueue
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[294]"></a>net_mem_free</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_que_free
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
</UL>

<P><STRONG><a name="[322]"></a>net_mem_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[356]"></a>net_mem_shrink</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_shrink
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
</UL>

<P><STRONG><a name="[33f]"></a>net_ndp_cache_find</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, net_ndp.o(i.net_ndp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_ndp_cache_find &rArr; ndp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_onlink
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_linklocal
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_que_free
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_alloc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[2b6]"></a>net_ndp_cache_refresh</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, net_ndp.o(i.net_ndp_cache_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ndp_cache_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[340]"></a>net_ndp_enqueue</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, net_ndp.o(i.net_ndp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = net_ndp_enqueue &rArr; ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[344]"></a>net_ndp_process</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, net_ndp.o(i.net_ndp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_linklocal
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_router_remove
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_que_free
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_prefix_add
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_next_opt
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_check_frame
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[2db]"></a>net_path</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net_sys.o(i.net_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_path &rArr; net_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strncpy
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[f9]"></a>net_ping_client_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ping_core.o(i.net_ping_client_init))
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>net_ping_client_run</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, net_ping_core.o(i.net_ping_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = net_ping_client_run &rArr; ping_send_req &rArr; net_icmp6_send_echo &rArr; net_icmp6_send &rArr; net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>net_ping_client_uninit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_ping_core.o(i.net_ping_client_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_ping_client_uninit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[34c]"></a>net_rand32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_sys.o(i.net_rand32))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_proc_tick
</UL>

<P><STRONG><a name="[fe]"></a>net_sntp_client_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, net_sntp_client_core.o(i.net_sntp_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_sntp_client_init &rArr; net_udp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>net_sntp_client_run</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, net_sntp_client_core.o(i.net_sntp_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = net_sntp_client_run &rArr; sntp_send_message &rArr; net_udp_send &rArr; net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sntp_stop
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sntp_send_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[325]"></a>net_sntp_client_start</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, net_sntp_client_core.o(i.net_sntp_client_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = net_sntp_client_start &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sntp_send_message
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_copy
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSNTPc_GetTime
</UL>

<P><STRONG><a name="[111]"></a>net_sntp_client_uninit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sntp_client_core.o(i.net_sntp_client_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_sntp_client_uninit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[299]"></a>net_strcasecmp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, net_common.o(i.net_strcasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_header
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_ftype
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[29a]"></a>net_strcmp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_common.o(i.net_strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_delim
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[2c8]"></a>net_strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_common.o(i.net_strcpy))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_path
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[2e2]"></a>net_strnchr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net_common.o(i.net_strnchr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_strnchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
</UL>

<P><STRONG><a name="[35a]"></a>net_strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_common.o(i.net_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_path
</UL>

<P><STRONG><a name="[2a4]"></a>net_sys_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(i.net_sys_error))
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sntp_client_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_http_server_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>

<P><STRONG><a name="[318]"></a>net_sys_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_lock))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSNTPc_GetTime
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[292]"></a>net_sys_resume</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_sys_resume &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[af]"></a>net_sys_tick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_sys_tick &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(i.netos_timer_create)
</UL>
<P><STRONG><a name="[31a]"></a>net_sys_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSNTPc_GetTime
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[2bf]"></a>net_sys_wakeup</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_tick
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
</UL>

<P><STRONG><a name="[2ed]"></a>net_tcp_abort</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = net_tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2e7]"></a>net_tcp_close</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, net_tcp.o(i.net_tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = net_tcp_close &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2e9]"></a>net_tcp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_tcp_get_buf &rArr; net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2e8]"></a>net_tcp_get_mss</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_get_mss))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[341]"></a>net_tcp_get_socket</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_tcp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_http_server_init
</UL>

<P><STRONG><a name="[2e4]"></a>net_tcp_get_state</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2e5]"></a>net_tcp_listen</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_tcp_listen &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_start
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2b9]"></a>net_tcp_process</STRONG> (Thumb, 1312 bytes, Stack size 56 bytes, net_tcp.o(i.net_tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[2eb]"></a>net_tcp_send</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, net_tcp.o(i.net_tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2ef]"></a>net_tcp_set_option</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, net_tcp.o(i.net_tcp_set_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_tcp_set_option
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_start
</UL>

<P><STRONG><a name="[fc]"></a>net_tcp_socket_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_tcp_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>net_tcp_socket_run</STRONG> (Thumb, 762 bytes, Stack size 32 bytes, net_tcp.o(i.net_tcp_socket_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = net_tcp_socket_run &rArr; tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>net_tcp_socket_uninit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_socket_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_tcp_socket_uninit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[360]"></a>net_udp_close</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, net_udp.o(i.net_udp_close))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sntp_client_start
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sntp_stop
</UL>

<P><STRONG><a name="[36d]"></a>net_udp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_udp_get_buf &rArr; net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sntp_send_message
</UL>

<P><STRONG><a name="[35c]"></a>net_udp_get_socket</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_udp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sntp_client_init
</UL>

<P><STRONG><a name="[35f]"></a>net_udp_open</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_udp.o(i.net_udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sntp_client_start
</UL>

<P><STRONG><a name="[2b8]"></a>net_udp_process</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, net_udp.o(i.net_udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = net_udp_process &rArr; net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[36f]"></a>net_udp_send</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = net_udp_send &rArr; net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sntp_send_message
</UL>

<P><STRONG><a name="[370]"></a>net_udp_send_if</STRONG> (Thumb, 430 bytes, Stack size 48 bytes, net_udp.o(i.net_udp_send_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offl_hl
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_find_route
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
</UL>

<P><STRONG><a name="[fb]"></a>net_udp_socket_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_udp.o(i.net_udp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_udp_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>net_udp_socket_uninit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_udp.o(i.net_udp_socket_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_udp_socket_uninit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[2aa]"></a>netif_create</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, net_config.o(i.netif_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_create
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[2bb]"></a>netif_delete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_config.o(i.netif_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_uninit
</UL>

<P><STRONG><a name="[2bd]"></a>netif_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_config.o(i.netif_lock))
<BR><BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>

<P><STRONG><a name="[2c1]"></a>netif_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.netif_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
</UL>

<P><STRONG><a name="[33b]"></a>netos_delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, net_config.o(i.netos_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>

<P><STRONG><a name="[31d]"></a>netos_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_config.o(i.netos_flag_clear))
<BR><BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[336]"></a>netos_flag_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.netos_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_callback
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>

<P><STRONG><a name="[31b]"></a>netos_flag_wait</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_config.o(i.netos_flag_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_flag_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[320]"></a>netos_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_config.o(i.netos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_init
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[2fc]"></a>netos_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_config.o(i.netos_lock))
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>

<P><STRONG><a name="[321]"></a>netos_mutex_create</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_config.o(i.netos_mutex_create))
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
</UL>

<P><STRONG><a name="[323]"></a>netos_thread_create</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_config.o(i.netos_thread_create))
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[31e]"></a>netos_thread_pass</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.netos_thread_pass))
<BR><BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[324]"></a>netos_timer_create</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_config.o(i.netos_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_timer_create &rArr; osTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[319]"></a>netos_timer_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_config.o(i.netos_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[2fe]"></a>netos_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.netos_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
</UL>

<P><STRONG><a name="[1bf]"></a>osRtxErrorNotify</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[85]"></a>osRtxIdleThread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxIdleThread))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[1cb]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_lib.o(i.osRtxThreadStackCheck))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[37e]"></a>pack_id</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, principal.o(i.pack_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pack_id
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_status
</UL>

<P><STRONG><a name="[1f4]"></a>passwords_match</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, principal.o(i.passwords_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = passwords_match
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccesoManual_Thread
</UL>

<P><STRONG><a name="[271]"></a>teclado_init</STRONG> (Thumb, 276 bytes, Stack size 80 bytes, teclado.o(i.teclado_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = teclado_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTeclado
</UL>

<P><STRONG><a name="[313]"></a>user_status</STRONG> (Thumb, 158 bytes, Stack size 208 bytes, principal.o(i.user_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = user_status &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_id
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMsgTXBIGFlashID
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModFlashThreadID
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Script
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
</UL>

<P><STRONG><a name="[6f]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[317]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Script
</UL>

<P><STRONG><a name="[37f]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[316]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Script
</UL>

<P><STRONG><a name="[382]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[381]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[383]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[315]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Script
</UL>

<P><STRONG><a name="[384]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[385]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[136]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[3c4]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3c5]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[380]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[122]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[126]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[252]"></a>SystemClock_Config</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>Timer2_Callback_SNTP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, http_server.o(i.Timer2_Callback_SNTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = Timer2_Callback_SNTP &rArr; get_time &rArr; netSNTPc_GetTime &rArr; net_sntp_client_start &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_server.o(i.Init_Timers_SNTP)
</UL>
<P><STRONG><a name="[23a]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[a9]"></a>time_callback</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, sntp.o(i.time_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = time_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sntp.o(i.get_time)
</UL>
<P><STRONG><a name="[a8]"></a>SPI_callback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, flash.o(i.SPI_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_callback &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(i.W25Q16_Init_SPI)
</UL>
<P><STRONG><a name="[9d]"></a>Th_flash</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, flash.o(i.Th_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Th_flash &rArr; deleteUser &rArr; W25Q16_WritePage_Clean &rArr; W25Q16_Erase_Sector &rArr; write_enable &rArr; W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUser
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_usable_memory
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getThIDPrinWeb
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getThIDPrinAccesoManual
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAllUsers
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteUser
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUser
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_PowerUp
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_PoerDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(i.Init_ThFlash)
</UL>
<P><STRONG><a name="[273]"></a>W25Q16_Erase_64kBlock</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, flash.o(i.W25Q16_Erase_64kBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25Q16_Erase_64kBlock &rArr; write_enable &rArr; W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_disable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_usable_memory
</UL>

<P><STRONG><a name="[276]"></a>W25Q16_Erase_Sector</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, flash.o(i.W25Q16_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25Q16_Erase_Sector &rArr; write_enable &rArr; W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_disable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage_Clean
</UL>

<P><STRONG><a name="[277]"></a>W25Q16_FastRead</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, flash.o(i.W25Q16_FastRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25Q16_FastRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUser
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLowestPosUser
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_user
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAllUsers
</UL>

<P><STRONG><a name="[262]"></a>W25Q16_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flash.o(i.W25Q16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25Q16_Init &rArr; W25Q16_Init_SPI &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Reset
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init_SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
</UL>

<P><STRONG><a name="[278]"></a>W25Q16_Init_SPI</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, flash.o(i.W25Q16_Init_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25Q16_Init_SPI &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init
</UL>

<P><STRONG><a name="[27b]"></a>W25Q16_Read</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, flash.o(i.W25Q16_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25Q16_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumUsers
</UL>

<P><STRONG><a name="[279]"></a>W25Q16_Reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flash.o(i.W25Q16_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25Q16_Reset &rArr; W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteInstruction
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init
</UL>

<P><STRONG><a name="[27a]"></a>W25Q16_WriteInstruction</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, flash.o(i.W25Q16_WriteInstruction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_disable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Reset
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_PowerUp
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_PoerDown
</UL>

<P><STRONG><a name="[27c]"></a>W25Q16_WritePage_Clean</STRONG> (Thumb, 354 bytes, Stack size 352 bytes, flash.o(i.W25Q16_WritePage_Clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = W25Q16_WritePage_Clean &rArr; W25Q16_Erase_Sector &rArr; write_enable &rArr; W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_disable
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytesToWrite
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteUser
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUser
</UL>

<P><STRONG><a name="[297]"></a>bytesToUser</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, flash.o(i.bytesToUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bytesToUser
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUser
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAllUsers
</UL>

<P><STRONG><a name="[27d]"></a>bytesToWrite</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flash.o(i.bytesToWrite))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage_Clean
</UL>

<P><STRONG><a name="[263]"></a>erase_usable_memory</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash.o(i.erase_usable_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = erase_usable_memory &rArr; W25Q16_Erase_64kBlock &rArr; write_enable &rArr; W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_64kBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
</UL>

<P><STRONG><a name="[28a]"></a>find_user</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, flash.o(i.find_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = find_user &rArr; getNumUsers &rArr; W25Q16_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumUsers
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_FastRead
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUser
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteUser
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUser
</UL>

<P><STRONG><a name="[28b]"></a>getLowestPosUser</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, flash.o(i.getLowestPosUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = getLowestPosUser &rArr; W25Q16_FastRead
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_FastRead
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUser
</UL>

<P><STRONG><a name="[289]"></a>getNumUsers</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash.o(i.getNumUsers))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getNumUsers &rArr; W25Q16_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_user
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAllUsers
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteUser
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUser
</UL>

<P><STRONG><a name="[268]"></a>getUser</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, flash.o(i.getUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getUser &rArr; find_user &rArr; getNumUsers &rArr; W25Q16_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_user
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytesToUser
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_FastRead
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_flash
</UL>

<P><STRONG><a name="[28c]"></a>userToBytes</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, flash.o(i.userToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = userToBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUser
</UL>

<P><STRONG><a name="[275]"></a>write_disable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flash.o(i.write_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_disable &rArr; W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteInstruction
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage_Clean
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_64kBlock
</UL>

<P><STRONG><a name="[274]"></a>write_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flash.o(i.write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_enable &rArr; W25Q16_WriteInstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteInstruction
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage_Clean
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_64kBlock
</UL>

<P><STRONG><a name="[a7]"></a>SPI_callback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rfid.o(i.SPI_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_callback &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfid.o(i.TM_MFRC522_InitSPI)
</UL>
<P><STRONG><a name="[254]"></a>TM_MFRC522_AntennaOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rfid.o(i.TM_MFRC522_AntennaOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TM_MFRC522_AntennaOn &rArr; TM_MFRC522_SetBitMask &rArr; TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_SetBitMask
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Init
</UL>

<P><STRONG><a name="[257]"></a>TM_MFRC522_Anticoll</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, rfid.o(i.TM_MFRC522_Anticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TM_MFRC522_Anticoll &rArr; TM_MFRC522_ToCard &rArr; TM_MFRC522_SetBitMask &rArr; TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_WriteRegister
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ToCard
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Check
</UL>

<P><STRONG><a name="[25a]"></a>TM_MFRC522_CalculateCRC</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rfid.o(i.TM_MFRC522_CalculateCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TM_MFRC522_CalculateCRC &rArr; TM_MFRC522_SetBitMask &rArr; TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_WriteRegister
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_SetBitMask
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ReadRegister
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Halt
</UL>

<P><STRONG><a name="[25c]"></a>TM_MFRC522_Check</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rfid.o(i.TM_MFRC522_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TM_MFRC522_Check &rArr; TM_MFRC522_Anticoll &rArr; TM_MFRC522_ToCard &rArr; TM_MFRC522_SetBitMask &rArr; TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Request
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Halt
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Anticoll
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_rfid
</UL>

<P><STRONG><a name="[25b]"></a>TM_MFRC522_ClearBitMask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rfid.o(i.TM_MFRC522_ClearBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TM_MFRC522_ClearBitMask &rArr; TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_WriteRegister
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ToCard
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_CalculateCRC
</UL>

<P><STRONG><a name="[25e]"></a>TM_MFRC522_Halt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rfid.o(i.TM_MFRC522_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_MFRC522_Halt &rArr; TM_MFRC522_ToCard &rArr; TM_MFRC522_SetBitMask &rArr; TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ToCard
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Check
</UL>

<P><STRONG><a name="[25f]"></a>TM_MFRC522_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, rfid.o(i.TM_MFRC522_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TM_MFRC522_Init &rArr; TM_MFRC522_AntennaOn &rArr; TM_MFRC522_SetBitMask &rArr; TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_WriteRegister
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Reset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_InitSPI
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_AntennaOn
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_rfid
</UL>

<P><STRONG><a name="[260]"></a>TM_MFRC522_InitSPI</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, rfid.o(i.TM_MFRC522_InitSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TM_MFRC522_InitSPI &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Init
</UL>

<P><STRONG><a name="[255]"></a>TM_MFRC522_ReadRegister</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rfid.o(i.TM_MFRC522_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_MFRC522_ReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ToCard
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_SetBitMask
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ClearBitMask
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_CalculateCRC
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_AntennaOn
</UL>

<P><STRONG><a name="[25d]"></a>TM_MFRC522_Request</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rfid.o(i.TM_MFRC522_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TM_MFRC522_Request &rArr; TM_MFRC522_ToCard &rArr; TM_MFRC522_SetBitMask &rArr; TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_WriteRegister
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ToCard
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Check
</UL>

<P><STRONG><a name="[261]"></a>TM_MFRC522_Reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfid.o(i.TM_MFRC522_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TM_MFRC522_Reset &rArr; TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Init
</UL>

<P><STRONG><a name="[256]"></a>TM_MFRC522_SetBitMask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rfid.o(i.TM_MFRC522_SetBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TM_MFRC522_SetBitMask &rArr; TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_WriteRegister
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ToCard
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_CalculateCRC
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_AntennaOn
</UL>

<P><STRONG><a name="[259]"></a>TM_MFRC522_ToCard</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, rfid.o(i.TM_MFRC522_ToCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TM_MFRC522_ToCard &rArr; TM_MFRC522_SetBitMask &rArr; TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_WriteRegister
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_SetBitMask
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ReadRegister
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Request
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Halt
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Anticoll
</UL>

<P><STRONG><a name="[258]"></a>TM_MFRC522_WriteRegister</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rfid.o(i.TM_MFRC522_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ToCard
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_SetBitMask
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Reset
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Request
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_ClearBitMask
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_CalculateCRC
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Anticoll
</UL>

<P><STRONG><a name="[9e]"></a>Th_rfid</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, rfid.o(i.Th_rfid))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Th_rfid &rArr; TM_MFRC522_Check &rArr; TM_MFRC522_Anticoll &rArr; TM_MFRC522_ToCard &rArr; TM_MFRC522_SetBitMask &rArr; TM_MFRC522_WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det_rfid_on
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_medidas
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_MFRC522_Check
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfid.o(i.Init_ThMFRC522)
</UL>
<P><STRONG><a name="[26f]"></a>init_timer_medidas</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rfid.o(i.init_timer_medidas))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_timer_medidas &rArr; osTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Th_rfid
</UL>

<P><STRONG><a name="[aa]"></a>timer_medidas_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rfid.o(i.timer_medidas_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_medidas_callback &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfid.o(i.init_timer_medidas)
</UL>
<P><STRONG><a name="[2f4]"></a>crc32_8bit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, web.o(i.crc32_8bit))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageFileInfo
</UL>

<P><STRONG><a name="[280]"></a>os_kernel_is_active</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_lib.o(i.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[b7]"></a>GetLinkInfo</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, phy_lan8742a.o(i.GetLinkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>GetLinkState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, phy_lan8742a.o(i.GetLinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, phy_lan8742a.o(i.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>Initialize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, phy_lan8742a.o(i.Initialize))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>PowerControl</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, phy_lan8742a.o(i.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>SetInterface</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, phy_lan8742a.o(i.SetInterface))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>SetMode</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, phy_lan8742a.o(i.SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>Uninitialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, phy_lan8742a.o(i.Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>Control</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, emac_stm32f4xx.o(i.Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Control &rArr; init_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>ControlTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.ControlTimer))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[22a]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, emac_stm32f4xx.o(i.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[b9]"></a>GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>GetMacAddress</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.GetMacAddress))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>GetRxFrameSize</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.GetRxFrameSize))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>GetRxFrameTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.GetRxFrameTime))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>GetTxFrameTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.GetTxFrameTime))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, emac_stm32f4xx.o(i.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>Initialize</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, emac_stm32f4xx.o(i.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>PHY_Read</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, emac_stm32f4xx.o(i.PHY_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PHY_Read &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>PHY_Write</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, emac_stm32f4xx.o(i.PHY_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PHY_Write &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>PowerControl</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, emac_stm32f4xx.o(i.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>ReadFrame</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, emac_stm32f4xx.o(i.ReadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>SendFrame</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, emac_stm32f4xx.o(i.SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>SetAddressFilter</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, emac_stm32f4xx.o(i.SetAddressFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetAddressFilter &rArr; crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>SetMacAddress</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.SetMacAddress))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>Uninitialize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, emac_stm32f4xx.o(i.Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[29e]"></a>crc32_8bit_rev</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.crc32_8bit_rev))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>

<P><STRONG><a name="[251]"></a>crc32_data</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, emac_stm32f4xx.o(i.crc32_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddressFilter
</UL>

<P><STRONG><a name="[1f6]"></a>init_dma</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, emac_stm32f4xx.o(i.init_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_desc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[2f5]"></a>init_rx_desc</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.init_rx_desc))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma
</UL>

<P><STRONG><a name="[2f6]"></a>init_tx_desc</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.init_tx_desc))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma
</UL>

<P><STRONG><a name="[24f]"></a>Disable_SPI_Clock</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, spi_stm32f4xx.o(i.Disable_SPI_Clock))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[249]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[250]"></a>Enable_SPI_Clock</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.Enable_SPI_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_SPI_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[d4]"></a>SPI1_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI1_Control &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>SPI1_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI1_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>SPI1_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_GetStatus &rArr; SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>SPI1_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI1_Initialize &rArr; SPI_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>SPI1_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI1_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI1_PowerControl &rArr; SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>SPI1_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI1_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_Receive &rArr; SPI_Receive &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>SPI1_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_Send &rArr; SPI_Send &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>SPI1_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI1_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI1_Transfer &rArr; SPI_Transfer &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>SPI1_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI1_Uninitialize &rArr; SPI_Uninitialize &rArr; SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>SPI2_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI2_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI2_Control &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>SPI2_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI2_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>SPI2_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI2_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_GetStatus &rArr; SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>SPI2_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI2_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI2_Initialize &rArr; SPI_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>SPI2_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI2_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI2_PowerControl &rArr; SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>SPI2_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI2_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI2_Receive &rArr; SPI_Receive &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>SPI2_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI2_Send &rArr; SPI_Send &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>SPI2_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI2_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI2_Transfer &rArr; SPI_Transfer &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>SPI2_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI2_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI2_Uninitialize &rArr; SPI_Uninitialize &rArr; SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>SPI3_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI3_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI3_Control &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>SPI3_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI3_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI3_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>SPI3_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI3_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI3_GetStatus &rArr; SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>SPI3_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI3_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI3_Initialize &rArr; SPI_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>SPI3_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI3_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI3_PowerControl &rArr; SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>SPI3_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI3_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI3_Receive &rArr; SPI_Receive &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>SPI3_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI3_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI3_Send &rArr; SPI_Send &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>SPI3_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI3_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI3_Transfer &rArr; SPI_Transfer &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>SPI3_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI3_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI3_Uninitialize &rArr; SPI_Uninitialize &rArr; SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>SPI4_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI4_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI4_Control &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>SPI4_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI4_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI4_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>SPI4_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI4_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI4_GetStatus &rArr; SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>SPI4_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI4_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI4_Initialize &rArr; SPI_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>SPI4_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI4_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI4_PowerControl &rArr; SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>SPI4_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI4_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI4_Receive &rArr; SPI_Receive &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>SPI4_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI4_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI4_Send &rArr; SPI_Send &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>SPI4_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI4_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI4_Transfer &rArr; SPI_Transfer &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>SPI4_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI4_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI4_Uninitialize &rArr; SPI_Uninitialize &rArr; SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>SPIX_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f4xx.o(i.SPIX_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>SPIX_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPIX_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIX_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[23c]"></a>SPI_Control</STRONG> (Thumb, 1290 bytes, Stack size 64 bytes, spi_stm32f4xx.o(i.SPI_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PeripheralReset
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_Control
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Control
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Control
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Control
</UL>

<P><STRONG><a name="[23d]"></a>SPI_GetDataCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_stm32f4xx.o(i.SPI_GetDataCount))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_GetDataCount
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_GetDataCount
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GetDataCount
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GetDataCount
</UL>

<P><STRONG><a name="[23e]"></a>SPI_GetStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_GetStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_GetStatus
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GetStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GetStatus
</UL>

<P><STRONG><a name="[23f]"></a>SPI_IRQHandler</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, spi_stm32f4xx.o(i.SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI_IRQHandler &rArr; SPI_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[240]"></a>SPI_Initialize</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, spi_stm32f4xx.o(i.SPI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_Initialize
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Initialize
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Initialize
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Initialize
</UL>

<P><STRONG><a name="[247]"></a>SPI_PeripheralReset</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, spi_stm32f4xx.o(i.SPI_PeripheralReset))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[241]"></a>SPI_PowerControl</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PeripheralReset
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI_Clock
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_SPI_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_PowerControl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_PowerControl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_PowerControl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_PowerControl
</UL>

<P><STRONG><a name="[242]"></a>SPI_Receive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Receive &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_Receive
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Receive
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Receive
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Receive
</UL>

<P><STRONG><a name="[24a]"></a>SPI_RxData</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, spi_stm32f4xx.o(i.SPI_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[243]"></a>SPI_Send</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Send &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_Send
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Send
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Send
</UL>

<P><STRONG><a name="[244]"></a>SPI_Transfer</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, spi_stm32f4xx.o(i.SPI_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Transfer &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_Transfer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Transfer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Transfer
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[24b]"></a>SPI_TxData</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spi_stm32f4xx.o(i.SPI_TxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[245]"></a>SPI_Uninitialize</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, spi_stm32f4xx.o(i.SPI_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_Uninitialize &rArr; SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_Uninitialize
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Uninitialize
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Uninitialize
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Uninitialize
</UL>

<P><STRONG><a name="[288]"></a>stderr_putchar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget_io.o(i.stderr_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stderr_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[287]"></a>stdout_putchar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget_io.o(i.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[1f9]"></a>ADC_Init</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[205]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[206]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[f4]"></a>eth0_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_config.o(i.eth0_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eth0_callback &rArr; net_eth_callback &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[375]"></a>ms2tick</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_config.o(i.ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>

<P><STRONG><a name="[78]"></a>svcRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[79]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[7a]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickFreq))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[7b]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[7c]"></a>svcRtxKernelStart</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[1c9]"></a>ThreadFlagsCheck</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[1c4]"></a>osRtxThreadBlock</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[1cd]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[1ce]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[1c6]"></a>osRtxThreadFree</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1c1]"></a>osRtxThreadListRoot</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRoot))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[9c]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[8c]"></a>svcRtxThreadExit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[8d]"></a>svcRtxThreadFlagsClear</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadFlagsClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsClear)
</UL>
<P><STRONG><a name="[8e]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[8f]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_thread.o(.text.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxThreadFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[90]"></a>svcRtxThreadGetId</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.svcRtxThreadGetId))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[91]"></a>svcRtxThreadNew</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[92]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadTerminate)
</UL>
<P><STRONG><a name="[93]"></a>svcRtxThreadYield</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxThreadYield &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadYield)
</UL>
<P><STRONG><a name="[77]"></a>svcRtxDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[1d1]"></a>TimerInsert</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[1da]"></a>TimerRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_timer.o(.text.TimerRemove))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[87]"></a>osRtxTimerTick</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerThread)
</UL>
<P><STRONG><a name="[94]"></a>svcRtxTimerIsRunning</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_timer.o(.text.svcRtxTimerIsRunning))
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerIsRunning)
</UL>
<P><STRONG><a name="[95]"></a>svcRtxTimerNew</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rtx_timer.o(.text.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerNew)
</UL>
<P><STRONG><a name="[96]"></a>svcRtxTimerStart</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_timer.o(.text.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxTimerStart &rArr; TimerInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStart)
</UL>
<P><STRONG><a name="[97]"></a>svcRtxTimerStop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_timer.o(.text.svcRtxTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxTimerStop
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStop)
</UL>
<P><STRONG><a name="[81]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[82]"></a>svcRtxMutexDelete</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[83]"></a>svcRtxMutexNew</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[84]"></a>svcRtxMutexRelease</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[1d3]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[9a]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[88]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[89]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[8a]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[8b]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[1b0]"></a>MessageQueueGet</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueReset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1ba]"></a>MessageQueuePut</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueReset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1b5]"></a>MessageQueueRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueReset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[99]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[7d]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[7e]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueNew)
</UL>
<P><STRONG><a name="[7f]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[80]"></a>svcRtxMessageQueueReset</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxMessageQueueReset &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueReset)
</UL>
<P><STRONG><a name="[31f]"></a>eth_check_link</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, net_eth.o(i.eth_check_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eth_check_link
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[337]"></a>eth_if_map</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_eth.o(i.eth_if_map))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_get_option
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[2a2]"></a>eth_iface_init</STRONG> (Thumb, 610 bytes, Stack size 16 bytes, net_eth.o(i.eth_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = eth_iface_init &rArr; net_addr6_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc_buf
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_aton
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_mtu_limit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[2ab]"></a>eth_iface_run</STRONG> (Thumb, 542 bytes, Stack size 24 bytes, net_eth.o(i.eth_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = eth_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_ReceiveRaw
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_refresh
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_reass_frame
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[2ba]"></a>eth_iface_uninit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, net_eth.o(i.eth_iface_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eth_iface_uninit &rArr; netif_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_uninit
</UL>

<P><STRONG><a name="[2bc]"></a>eth_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(i.eth_lock))
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[2a6]"></a>eth_mtu_limit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_eth.o(i.eth_mtu_limit))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[33a]"></a>eth_opt_len</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_eth.o(i.eth_opt_len))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_get_option
</UL>

<P><STRONG><a name="[2be]"></a>eth_receive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, net_eth.o(i.eth_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eth_receive &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[2c0]"></a>eth_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(i.eth_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[331]"></a>arp_cache_alloc</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, net_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[28e]"></a>arp_cache_run</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, net_arp.o(i.arp_cache_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arp_cache_run &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
</UL>

<P><STRONG><a name="[32f]"></a>arp_is_cacheable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, net_arp.o(i.arp_is_cacheable))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[28f]"></a>arp_probe_run</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_arp.o(i.arp_probe_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_probe_run &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_run
</UL>

<P><STRONG><a name="[293]"></a>arp_proc_response</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, net_arp.o(i.arp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_proc_response &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[290]"></a>arp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_arp.o(i.arp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_run
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[295]"></a>arp_send_reply</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, net_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_send_reply &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[291]"></a>arp_send_request</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, net_arp.o(i.arp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_run
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
</UL>

<P><STRONG><a name="[334]"></a>arp_sender_valid</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, net_arp.o(i.arp_sender_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arp_sender_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[2f0]"></a>igmp_host_run</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, net_igmp.o(i.igmp_host_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = igmp_host_run &rArr; igmp_send_report &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_host_run
</UL>

<P><STRONG><a name="[34b]"></a>igmp_map_group</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, net_igmp.o(i.igmp_map_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = igmp_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_is_member
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
</UL>

<P><STRONG><a name="[2f1]"></a>igmp_send_report</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, net_igmp.o(i.igmp_send_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = igmp_send_report &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_host_run
</UL>

<P><STRONG><a name="[2c3]"></a>frag_map_session</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, net_ip4_frag.o(i.frag_map_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frag_map_session &rArr; que_free_list &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>

<P><STRONG><a name="[2c4]"></a>que_free_list</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_ip4_frag.o(i.que_free_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = que_free_list &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_run
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_map_session
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>

<P><STRONG><a name="[36e]"></a>udp_port_in_use</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_udp.o(i.udp_port_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>

<P><STRONG><a name="[363]"></a>tcp_map_socket</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, net_tcp.o(i.tcp_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_map_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[366]"></a>tcp_parse_opt</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, net_tcp.o(i.tcp_parse_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_parse_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[365]"></a>tcp_proc_acknr</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_proc_acknr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_proc_acknr &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[364]"></a>tcp_proc_dupack</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_proc_dupack))
<BR><BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[36c]"></a>tcp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
</UL>

<P><STRONG><a name="[36b]"></a>tcp_que_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_que_init))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
</UL>

<P><STRONG><a name="[36a]"></a>tcp_que_resend</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_que_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[362]"></a>tcp_send_ctrl</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_abort
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
</UL>

<P><STRONG><a name="[369]"></a>tcp_send_data</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
</UL>

<P><STRONG><a name="[367]"></a>tcp_send_reset</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[368]"></a>tcp_set_cwnd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_set_cwnd))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[361]"></a>tcp_transit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_transit &rArr; tcp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_abort
</UL>

<P><STRONG><a name="[37c]"></a>tcp_write</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, net_tcp.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offl_hl
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[28d]"></a>add_server_id</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_http_server.o(i.add_server_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = add_server_id &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[298]"></a>chk_post_req</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, net_http_server.o(i.chk_post_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = chk_post_req &rArr; atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcmp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcasecmp
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_strcpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_par
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[29d]"></a>get_next_field</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_http_server.o(i.get_next_field))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_header
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[29c]"></a>get_next_par</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, net_http_server.o(i.get_next_par))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[30e]"></a>hex2byte</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_http_server.o(i.hex2byte))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_GetEnvVar
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_req_line
</UL>

<P><STRONG><a name="[2c6]"></a>http_add_header</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, net_http_server.o(i.http_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = http_add_header &rArr; utc_to_http &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGX_ContentType
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_CustomHeader
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Charset
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcmp
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_http
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2cc]"></a>http_error_msg</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, net_http_server.o(i.http_error_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = http_error_msg &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_CustomHeader
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2cd]"></a>http_get_ftype</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, net_http_server.o(i.http_get_ftype))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = http_get_ftype &rArr; net_strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ContentType
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2cf]"></a>http_kill_session</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, net_http_server.o(i.http_kill_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = http_kill_session &rArr; netCGI_ProcessData &rArr; user_status &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netHTTPs_fclose
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[ab]"></a>http_listener</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, net_http_server.o(i.http_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = http_listener &rArr; http_proc_post &rArr; netCGI_ProcessData &rArr; user_status &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessQuery
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netHTTPs_AcceptClient
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcmp
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_req_line
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_header
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_ftype
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_http_server.o(i.net_http_server_init)
</UL>
<P><STRONG><a name="[2d5]"></a>http_open_file</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, net_http_server.o(i.http_open_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = http_open_file &rArr; imageFileInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Redirect
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageFileInfo
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netHTTPs_fstat
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netHTTPs_fopen
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netHTTPs_FileAccess
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_path
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2d4]"></a>http_parse_header</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, net_http_server.o(i.http_parse_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = http_parse_header &rArr; http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcasecmp
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2d9]"></a>http_proc_multipart</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, net_http_server.o(i.http_proc_multipart))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = http_proc_multipart &rArr; netCGI_ProcessData &rArr; user_status &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strnchr
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcmp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcasecmp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_delim
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_par
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2d7]"></a>http_proc_post</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, net_http_server.o(i.http_proc_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = http_proc_post &rArr; netCGI_ProcessData &rArr; user_status &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_ProcessData
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2e3]"></a>http_server_run</STRONG> (Thumb, 942 bytes, Stack size 40 bytes, net_http_server.o(i.http_server_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = http_server_run &rArr; http_kill_session &rArr; netCGI_ProcessData &rArr; user_status &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCGI_Script
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netHTTPs_fread
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netHTTPs_fclose
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_strcpy
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_state
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_mss
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_buf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_http_server_run
</UL>

<P><STRONG><a name="[2ee]"></a>http_server_start</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, net_http_server.o(i.http_server_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = http_server_start &rArr; net_tcp_set_option
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_set_option
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_http_server_init
</UL>

<P><STRONG><a name="[29b]"></a>http_strcpy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_http_server.o(i.http_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = http_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[2e0]"></a>http_to_utc</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, net_http_server.o(i.http_to_utc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_header
</UL>

<P><STRONG><a name="[2d3]"></a>proc_req_line</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, net_http_server.o(i.proc_req_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proc_req_line
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2d8]"></a>read_script_line</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, net_http_server.o(i.read_script_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_script_line &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netHTTPs_fgets
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2e1]"></a>search_delim</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, net_http_server.o(i.search_delim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = search_delim
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
</UL>

<P><STRONG><a name="[2ca]"></a>utc_to_http</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, net_http_server.o(i.utc_to_http))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = utc_to_http &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[ac]"></a>sntp_listener</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, net_sntp_client_core.o(i.sntp_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sntp_listener &rArr; sntp_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_comp
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sntp_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_sntp_client_core.o(i.net_sntp_client_init)
</UL>
<P><STRONG><a name="[35d]"></a>sntp_send_message</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_sntp_client_core.o(i.sntp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sntp_send_message &rArr; net_udp_send &rArr; net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sntp_client_run
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sntp_client_start
</UL>

<P><STRONG><a name="[35e]"></a>sntp_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_sntp_client_core.o(i.sntp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sntp_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sntp_client_run
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sntp_listener
</UL>

<P><STRONG><a name="[35b]"></a>ping_send_req</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_ping_core.o(i.ping_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ping_send_req &rArr; net_icmp6_send_echo &rArr; net_icmp6_send &rArr; net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_run
</UL>

<P><STRONG><a name="[31c]"></a>sys_proc_tick</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_sys.o(i.sys_proc_tick))
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[2ff]"></a>ndp_cache_add</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, net_ndp.o(i.ndp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ndp_cache_add &rArr; ndp_cache_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_alloc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[301]"></a>ndp_cache_alloc</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, net_ndp.o(i.ndp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ndp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
</UL>

<P><STRONG><a name="[359]"></a>ndp_check_frame</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_ndp.o(i.ndp_check_frame))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[306]"></a>ndp_next_opt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_ndp.o(i.ndp_next_opt))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
</UL>

<P><STRONG><a name="[303]"></a>ndp_prefix_add</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, net_ndp.o(i.ndp_prefix_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ndp_prefix_add &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_create
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[305]"></a>ndp_proc_response</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, net_ndp.o(i.ndp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ndp_proc_response &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_next_opt
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[307]"></a>ndp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_ndp.o(i.ndp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ndp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[308]"></a>ndp_router_remove</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, net_ndp.o(i.ndp_router_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndp_router_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[309]"></a>ndp_send_reply</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, net_ndp.o(i.ndp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[30b]"></a>ndp_send_request</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, net_ndp.o(i.ndp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_enqueue
</UL>

<P><STRONG><a name="[2f7]"></a>ip4_get_chksum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_ip4.o(i.ip4_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_get_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[34d]"></a>ip4_get_mtu</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_ip4.o(i.ip4_get_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[2fb]"></a>mem_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_lock))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
</UL>

<P><STRONG><a name="[2fd]"></a>mem_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
</UL>

<P><STRONG><a name="[335]"></a>crc32_8bit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_common.o(i.crc32_8bit))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc_buf
</UL>

<P><STRONG><a name="[177]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[73]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[198]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1a5]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
